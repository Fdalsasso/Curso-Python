# Cree un diccionario de países e intente agregar, eliminar, leer y actualizar valores.
# Create a country dictionary and try to add, delete, read and update values.

diccionario = {"pais1" : "Argentina", "pais2" : "Brasil", "pasi3" : "Colombia"}

diccionario["pais4"] = "Dinamarca" #agrega

diccionario.pop("pais2") #elimina

print(diccionario.get("pais2")) #leer la info de pais1

# Cree una tupla con diferentes valores, intente agregar, eliminar, leer y actualizar valores
# Create a tuple with different values, try adding, deleting, reading and updating values

tupla = ("pais1", "pais2", "pais3")

# Cree un set con diferentes valores, intente agregar, eliminar, leer y actualizar valores
# Create a set with different values, try adding, deleting, reading and updating values

set = {"pais1", "pais2", "pais3"}

set.add("pais4")
set.discard("pais2")

# Hacer una lista con los estudiantes aprobados y una con los desaprobados. Para estar aprobados 
# la nota tiene que ser mayor o igual a 12

# Make a list of the approved students and one of the disapproved ones. To be approved the grade 
# must be greater than or equal to 12

from optparse import Values


df = {"student_1" : 13 , "student_2" : 17 , "student_3" : 9 , "student_4" : 15 , "student_5" : 8 ,
"student_6" : 14 , "student_7" : 16 , "student_8" : 12 , "student_9" : 13 , "student_10" : 15 ,
"student_11" : 14 , "student_112" : 9 , "student_13" : 10 , "student_14" : 12 , "student_15" :
13 , "student_16" : 7 , "student_17" : 12 , "student_18" : 15 , "student_19" : 9 , "student_20"
: 17 }

aprobados = []
desaprobados = []

for key, value in df.items():
    if value > 11:
        aprobados.append(key)
    else:
        desaprobados.append(key)

print(aprobados)
print(desaprobados)

# crear un diccionario a partir de este diccionario con datos, pero que no muestre el array, sino el promedio
# create a dictionary from this dictionary with data, but that does not show the array, but the average

df = {'student1': [4, 6, 8], 'students2': [10, 5, 7], 'student3': [6, 6, 9]}

nuevo_df = {}

for elem in df:
    suma = 0
    cont = 0
    for nota in df.get(elem):
        suma += nota
        cont += 1
    nuevo_df[elem] = suma / cont

print(nuevo_df)

# Escriba un programa Python para crear un archivo de texto con una cadena.
# Write a Python program to create a text file with a string.

holaMundo = "Hello World"

archivo = open("archivo.txt", "w")
archivo.write(holaMundo)
archivo.close()

# Escriba un programa Python para leer un archivo de texto completo.
# Write a Python program to read an entire text file.

archivo = open("archivo.txt", "r")
texto = archivo.read()
archivo.close()
print(texto)

# Escriba un programa de Python para agregar texto a un archivo y mostrar el texto.
# Write a Python program to add text to a file and display the text.

texto = "\nHola que tal tu como estas, dime si eres feliz"

archivo = open("archivo.txt", "a")
archivo.write(texto)
archivo.close()
archivo = open("archivo.txt", "r")
leer = archivo.read()
archivo.close()

print(leer)

# Escriba un programa Python para leer un archivo línea por línea y almacenarlo en una lista.
# Write a Python program to read a file line by line and store it in a list.

archivo = open("archivo.txt", "r")
texto = archivo.readlines()
archivo.close()
print(texto)

# Escriba un programa Python para encontrar las palabras más largas.
# Write a Python program to find the longest words.

archivo = open("archivo.txt", "r")
texto = archivo.readlines()
archivo.close()

listaDePalabras = []

for elem in texto:
    palabras = ""
    for palabra in elem:
        if palabra != " " and palabra != "\n":
            palabras += palabra
        else:
            listaDePalabras.append(palabras)
            palabras = ""

palabraMasLarga = listaDePalabras[0]

for elem in listaDePalabras:
    if len(elem) > len(palabraMasLarga):
        palabraMasLarga = elem

# Escriba un programa Python para contar el número de líneas en un archivo de texto.
# Write a Python program to count the number of lines in a text file.

archivo = open("archivo.txt", "r")
texto = archivo.readlines()
archivo.close()

print(len(texto))

# Utilizando el archivo JSON brindado:
# busque y muestre el pokemon numero 54
# cree la función Pokédex que le permita buscar por número o nombre un pokemon y le de su información
# contar cuantos pokemones hay de cada tipo(tipo 1) y mostrar por pantalla
# Buscar el pokemon con ataque más poderoso (Attack) que no sea dragón ni legendario

# Using the JSON file provided:
# search and show pokemon number 54
# create the Pokédex function that allows you to search for a pokemon by number or name and gives you its information
# count how many pokemon there are of each type (type 1) and show on the screen
# Find the pokemon with the most powerful attack (Attack) that is neither dragon nor legendary

import json

def buscar(lista, pokemon):
    if type(pokemon) == int:
        return lista[pokemon - 1]
    else:
        for i in lista:
            if i['Name'] == pokemon:
                return i
        
def tipos(lista):
    df = {}
    for elem in lista:
        if df.get(elem['Type 1']) == None:
            df[elem['Type 1']] = 1
        else:
            df[elem['Type 1']] += 1
    return df

def masPoderoso(lista):
    primero = lista[0]
    for pokemon in lista:
        if pokemon['Attack'] > primero['Attack'] and pokemon['Type 1'] != 'Dragon' and pokemon['Type 2'] != 'Dragon' and pokemon['Legendary'] == 'FALSO':
            primero = pokemon
    return primero


lista = []
df = {}

with open("poke.json", "r") as pokemones:
    data = json.load(pokemones)
    for i in data:
        lista.append(i)


print(masPoderoso(lista))